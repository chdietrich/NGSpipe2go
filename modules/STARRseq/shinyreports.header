shinyReports_vars=[
    project             : PROJECT,                        //project directory
    org                 : ESSENTIAL_ORG,                  //UCSC organism
    db                  : ESSENTIAL_DB,                   //UCSC assembly version
    paired              : ESSENTIAL_PAIRED,               //paired-end data [yes|no]
    log                 : LOGS,                           //where the logs lie
    qc                  : QC,                             //where the QC lie
    res                 : RESULTS,                        //where the results lie
    prefix              : ESSENTIAL_SAMPLE_PREFIX,        //standard sample prefix
    strandedness        : ESSENTIAL_STRANDED,             //strandedness of the library [no|yes|reverse]
    run_cutadapt        : RUN_CUTADAPT,                   //apply read trimming
    run_peakanno        : RUN_PEAK_ANNOTATION,            //whether peaks were annotated relative to genes
    run_diffbind        : RUN_DIFFBIND,                   //whether differential peak activity between groups was performed
    run_enrich          : RUN_ENRICHMENT,                 //whether GREAT gene GO enrichment was run
    capstarrseq_diffexp : CAPSTARRSEQ_DIFFEXP,            //whether CapSTARR-seq was processed using differential expression approach
    gtf                 : ESSENTIAL_GENESGTF,             //for CapSTARR-seq, GTF file with target regions
    fastqc_out          : FastQC_vars.outdir,             //where the Fastqc output lie
    fastqc_log          : LOGS + "/FastQC",               //where the Fastqc logs lie
    fastqc_summarized   : "FALSE",                        //should FastQC plots be summarized in the report?
    fastqscreen_out     : FastqScreen_vars.outdir,        //where the FastQScreen output lie
    fastqscreen_log     : LOGS + "/FastQScreen",          //where the FastQScreen log lie
    fastqscreen_perc    : ESSENTIAL_FASTQSCREEN_PERC,     //contaminant percentage to be plotted
    cutadapt_stats      : Cutadapt_vars.statsdir,         //cutadapt stat files
    bowtie_log          : LOGS + "/bowtie2",              //where the Bowtie(2) logs lie
    bamindex_log        : LOGS + "/BAMindexer",           //where the Samtools/BamIndexer logs lie
    insertsize          : InsertSize_vars.outdir,         //where the insertsize statistics are found
    extend_log          : LOGS + "/extend",               //where the extend/BedTools logs lie
    dupradar_log        : binding.variables.containsKey("dupRadar_vars") ? dupRadar_vars.outdir : "" ,     //where the dupRadar logs lie
    de_deseq            : binding.variables.containsKey("DE_DESeq2_vars") ? DE_DESeq2_vars.outdir + "/DE_DESeq2.RData" : "",   //where the DE_DESeq2 output lies
    de_deseq_FDR        : binding.variables.containsKey("DE_DESeq2_vars") ? DE_DESeq2_vars.FDR : "",       // which FDR threshold was used for the DESeq2 analysis
    de_deseq_FC         : binding.variables.containsKey("DE_DESeq2_vars") ? DE_DESeq2_vars.FC : "",        // which FC threshold was used for the DESeq2 analysis
    subread             : binding.variables.containsKey("subread_count_vars") ? subread_count_vars.outdir : "",      // location of the subread counts
    subread_suffix      : ".raw_readcounts.tsv.summary",  // the extension of the subread stats file
    subread_log         : LOGS + "/subread_count",        //where the Subread/FeatureCounts logs lie
    bam2bw_log          : LOGS + "/bam2bw",               //where the Bam2BW logs lie
    markdups_log        : LOGS + "/MarkDups",             //where the picard MarkDuplicates logs lie
    deseq_logs          : LOGS + "/DE_DESeq2",            //where the DE_DESeq2 logs lie
    plots_column        : "3",                            //number of columns to splits the plot grids (dupradar, ipstrength...). Min=2L. L=integer in R
    sort_alpha          : "TRUE",                         //should samples be sorted alphabetically in the report?
    ipstrength          : binding.variables.containsKey("ipstrength_vars") ? ipstrength_vars.outdir : "",         //where the IPstrength files lie
    ipstrength_log      : LOGS + "/ipstrength",           //where the IPstrength/R logs lie
    pbc                 : binding.variables.containsKey("pbc_vars") ? pbc_vars.outdir : "",                //where the PBC files lie
    phantompeak         : binding.variables.containsKey("phantompeak_vars") ? phantompeak_vars.outdir : "",        //where the PhantomPeak files lie
    phantom_log         : LOGS + "/phantompeak",          //where the PhantomPeak/R logs lie
    macs2               : binding.variables.containsKey("macs2_vars") ? macs2_vars.outdir : "",              //where the MACS2 results lie
    macs2_log           : LOGS + "/macs2",                //where the macs2 logs lie
    blacklist_filter    : binding.variables.containsKey("blacklist_filter_vars") ? blacklist_filter_vars.outdir + "/peaks_detected_table.csv" : "",
    upset               : binding.variables.containsKey("UPSET_vars") ? UPSET_vars.outdir : "",              //where the upset plots lie
    peak_annotation     : binding.variables.containsKey("peak_annotation_vars") ? peak_annotation_vars.outdir : "",    // where the peak annotation results lie
    great               : binding.variables.containsKey("GREAT_vars") ? GREAT_vars.outdir : "",              // where the GO enrichment results lie
    diffbind            : (ESSENTIAL_DIFFBIND_VERSION >= 3 ? 
                          (binding.variables.containsKey("diffbind3_vars") ? diffbind3_vars.outdir : "") :
                          (binding.variables.containsKey("diffbind2_vars") ? diffbind2_vars.outdir : "")), // results folder with diffbind.rds results file
    trackhub_done       : TRACKS + "/trackhub.done",      //contains trackhub URL
    tool_versions       : collectToolVersions_vars.outdir + "/tool_versions.txt", //where the tool versions listed
    target              : CAPSTARRSEQ_DIFFEXP ? new File(PIPELINE_ROOT + "/pipelines/STARRseq/targets_diffexpr.txt").getCanonicalPath() : new File(PIPELINE_ROOT + "/pipelines/STARRseq/targets_peaks.txt").getCanonicalPath()
]

load PIPELINE_ROOT + "/modules/STARRseq/shinyreports.groovy"

