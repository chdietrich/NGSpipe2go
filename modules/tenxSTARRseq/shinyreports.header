shinyReports_vars=[
    project         : PROJECT,          //project directory
    org             : ESSENTIAL_ORG,    //UCSC organism
    db              : ESSENTIAL_DB,     //UCSC assembly version
    paired          : ESSENTIAL_PAIRED, // paired-end data [yes|no]
    log             : LOGS,             //where the logs lie
    qc              : QC,               //where the QC lie
    res             : RESULTS,          //where the results lie
    sce             : (binding.variables.containsKey("MergeAmpliconCounts_vars") ? MergeAmpliconCounts_vars.sce : (binding.variables.containsKey("MergeSTARRCounts_vars") ? MergeSTARRCounts_vars.sce : RESULTS + "/sce.RDS")), // SCE .RDS file
    cellranger_aggr_id: (binding.variables.containsKey("cellranger_aggr_vars") ? cellranger_aggr_vars.id : "aggr"), // folder name for results from cellranger aggr
    prefix          : ESSENTIAL_SAMPLE_PREFIX, //standard sample prefix
    strandedness    : ESSENTIAL_STRANDED,             //strandedness of the library [no|yes|reverse]
    star_log        : binding.variables.get("STAR_vars.logdir"),  //where the STAR logs lie
    star_suffix     : "Log.final.out",         //extension given to the STAR log files
    starparms_suffix: "Log.out",               //extension given to the STAR log files
    fastqc_out      : binding.variables.get("FastQC_vars.outdir"),  //where the Fastqc output lie
    fastqc_log      : LOGS + "/FastQC",        //where the Fastqc logs lie
    fastqc_summarized   : "FALSE",             //should FastQC plots be summarized in the report?
    fastqscreen_out : binding.variables.get("FastqScreen_vars.outdir"),  //where the FastQScreen output lie
    fastqscreen_log : LOGS + "/FastQScreen",          //where the FastQScreen log lie
    fastqscreen_perc : ESSENTIAL_FASTQSCREEN_PERC,     //contaminant percentage to be plotted
    bamindex_log    : LOGS + "/BAMindexer",    //where the Samtools/BamIndexer logs lie
    dupradar_log    : binding.variables.get("dupRadar_vars.outdir"),    //where dupRadar results lie
    rnatypes_log    : LOGS + "/RNAtypes",      //where the RNAtypes logs lie
    rnatypes        : binding.variables.get("subread2rnatypes_vars.outdir"), //where the RNAtypes count results lie
    rnatypes_suffix : "counts.tsv",            //the extension of the subread results files
    genebodycov_log : binding.variables.get("geneBodyCov2_vars.outdir"),
    bustard         : QC + "/DemultiplexedBustardSummary.xml",  //where the bustard xml file lies
    subread         : binding.variables.get("subread_count_vars.outdir"),     // location of the subread counts
    subread_suffix  : ".raw_readcounts.tsv.summary", // the extension of the subread stats file
    subread_log     : LOGS + "/subread_count",       //where the Subread/FeatureCounts logs lie
    bam2bw_log      : LOGS + "/bam2bw",              //where the Bam2BW logs lie
    umicount        : (PIPELINE == "scRNAseq_marsseq" ? umicount_vars.outdir : ""), //location of the umitools counts 
    umicount_log    : (PIPELINE == "scRNAseq_marsseq" ? umicount_vars.logdir : ""), //where the umicount/FeatureCounts logs lie
    markdups_log    : LOGS + "/MarkDups",            //where the picard MarkDuplicates logs lie
    plots_column    : 3,                             //number of columns to splits the plot grids (dupradar, genebodycov...). Min=2L. L=integer in R
    sort_alpha      : "TRUE",                        //should samples be sorted alphabetically in the report?
    inferexperiment_logs: binding.variables.get("inferexperiment_vars.outdir"), //where the inferexperiment logs lie
    qualimap_logs   : binding.variables.get("qualimap_vars.outdir"),  //where the qualimap output files are
    trackhub_done   : PROJECT + "/trackhub.done",    //contains trackhub URL
    tool_versions   : collectToolVersions_vars.outdir + "/tool_versions.txt", //where the tool versions listed
    run_cutadapt    : RUN_CUTADAPT,    
    cutadapt_stats  : binding.variables.get("Cutadapt_vars.statsdir"),  // cutadapt stat files
    gtf             : ESSENTIAL_GENESGTF, 
    seqtype         : PIPELINE,
    target          : new File(PIPELINE_ROOT + "/pipelines/scRNAseq/targets.txt").getCanonicalPath(),
    mtgenes         : ESSENTIAL_MTGENES,
    // filtering module output in report
    samplepattern1  : "", // pattern for sample names to select to display in report (e.g. "\\.R1" for MARS-Seq because R2 contains only barcode)
    samplepattern2  : "", // pattern2 for sample names to exclude from report
    maxno           : "", // the maximum plot number will be restricted accordingly to the first 'maxno' plots (e.g. for SMART-Seq with hundreds of fastq files). Empty string means no restriction.
    colorByFactor   : "", // variables for grouping and plotting (if empty, default value selected depending on seqtype)
    // Criteria for filtering out low quality cells
    type_of_threshold         : "absolute", // either "absolute" or "relative" (i.e. using MAD)
    threshold_total_counts_min: 2000,       // lower threshold 2000
    threshold_total_counts_max: "",       // May be empty
    threshold_total_features_detected: 500, // lower threshold 500
    threshold_pct_counts_Mt   : 50,         // upper threshold 50
    nmads                     : 3,          // number of absolute deviations from median. Only relevant if type_of_threshold = "relative".
    apply_QCfilter_by_factor  : ""      // may be empty. Relative QC fiter criteria is applied separately for each group defined by this factor (must be given in targets.txt). Only relevant if type_of_threshold = "relative".
]

load PIPELINE_ROOT + "/modules/scRNAseq/shinyreports.groovy"

